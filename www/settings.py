"""
Django settings for testou project.

Generated by 'django-admin startproject' using Django 3.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

from www.utils import get_env

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = get_env("SECRET_KEY", "zisisverysecraite")
DEBUG = get_env("DEBUG", "0") == "1"
ALLOWED_HOSTS = get_env("ALLOWED_HOSTS", "127.0.0.1").split()


INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "whitenoise.runserver_nostatic",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    "rest_framework",
    "mptt",
    "rest_framework.authtoken",
    "django.contrib.postgres",
    "sass_processor",
    "www",
    "documents",
    "users",
    "catalog",
    "tags",
    "search",
]

DOCUMENT_STORAGE = "django.core.files.storage.FileSystemStorage"
BASE_URL = "https://dochub.be/"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = "www.urls"

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                "django.contrib.auth.context_processors.auth",
                "django.template.context_processors.request",
                "django.template.context_processors.debug",
                "django.template.context_processors.i18n",
                "django.template.context_processors.media",
                "django.template.context_processors.static",
                "django.template.context_processors.tz",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

DATABASES = {
    "default": {
        "ENGINE": get_env("SQL_ENGINE", "django.db.backends.sqlite3"),
        "NAME": get_env("SQL_DATABASE", str(BASE_DIR / "db.sqlite")),
        "USER": get_env("SQL_USER", "user"),
        "PASSWORD": get_env("SQL_PASSWORD", "password"),
        "HOST": get_env("SQL_HOST", "localhost"),
        "PORT": get_env("SQL_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

MESSAGE_STORAGE = "django.contrib.messages.storage.session.SessionStorage"


WSGI_APPLICATION = "www.wsgi.application"
AUTH_USER_MODEL = "users.User"
LOGIN_REDIRECT_URL = "index"
LOGIN_URL = "/login"
SITE_ID = 1

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'fr-be'
TIME_ZONE = 'Europe/Brussels'
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATICFILES_DIRS = [
  BASE_DIR / "static",
]

STATIC_URL = "/static/"
MEDIA_URL = "/media/"

STATIC_ROOT = get_env("STATIC_ROOT", str(BASE_DIR / "collected_static"))
MEDIA_ROOT = get_env("MEDIA_ROOT", str(BASE_DIR / "media"))

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'


BROKER_URL = get_env("REDIS_BROKER", "redis://localhost:6379/0")

CACHES = {
    'default': {
        'BACKEND': get_env("CACHE_BACKEND", "django.core.cache.backends.dummy.DummyCache"),
        'LOCATION': get_env("CACHE_LOCATION", "127.0.0.1:11211"),
        'TIMEOUT': int(get_env("CACHE_TIMEOUT", "300")),
    }
}

ALLOWED_HOSTS = get_env("ALLOWED_HOSTS", "127.0.0.1").split()


if DEBUG:
    INSTALLED_APPS.extend([
        "django_extensions",
        "debug_toolbar",
    ])
    MIDDLEWARE.extend([
        "debug_toolbar.middleware.DebugToolbarMiddleware"
    ])
    INTERNAL_IPS = [
        '127.0.0.1',
        'localhost',
        '0.0.0.0',
    ]
else:
    INSTALLED_APPS.extend([
        "gunicorn",
        "minio_storage"
    ])

    ADMINS = list(
        zip(
            get_env("ADMIN_NAME", "Th√©odore Verhaegen").split(","),
            get_env("ADMIN_EMAIL", "tverhaeg@ulb.be").split(","),
        )
    )
    MANAGERS = ADMINS

    sentry_dsn = get_env("SENTRY_SDK")

    if sentry_dsn is None:
        import sentry_sdk
        from sentry_sdk.integrations.django import DjangoIntegration

        sentry_sdk.init(
            dsn=sentry_dsn,
            integrations=[DjangoIntegration()],
            traces_sample_rate=1.0,
            send_default_pii=True
        )

    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

    MINIO_STORAGE_ENDPOINT = get_env("MINIO_STORAGE_ENDPOINT", "minio.xyz")
    MINIO_STORAGE_ACCESS_KEY = get_env("MINIO_STORAGE_ACCESS_KEY", "lalala")
    MINIO_STORAGE_SECRET_KEY = get_env("MINIO_STORAGE_SECRET_KEY", "lalala")
    MINIO_STORAGE_USE_HTTPS = True
    MINIO_STORAGE_MEDIA_BUCKET_NAME = get_env("MINIO_STORAGE_MEDIA_BUCKET_NAME", "lalala")
    MINIO_STORAGE_MEDIA_USE_PRESIGNED = True

    SESSION_ENGINE = get_env("SESSION_ENGINE", "django.contrib.sessions.backends.cached_db")

    DEFAULT_FILE_STORAGE = get_env("FILE_STORAGE", "minio_storage.storage.MinioMediaStorage")

READ_ONLY = False
REJECTED_FILE_FORMATS = (".zip", ".tar", ".gz", ".rar")
